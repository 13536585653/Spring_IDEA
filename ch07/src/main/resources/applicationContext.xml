<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- 连接属性 -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="123"/>
        <!--连接池启动时的初始连接数-->
        <property name="initialSize" value="5"/>
        <!--连接池最大连接数-->
        <property name="maxActive" value="60"/>
        <!--连接池最大空闲值连接数-->
        <property name="maxIdle" value="50"/>
        <!--连接池最小空闲值连接数-->
        <property name="minIdle" value="10"/>
        <!--最大的等待时间，单位是毫秒-->
        <property name="maxWait" value="2000"/>
        <!--还可以指定其他更多属性...-->
    </bean>

    <!-- 配置JdbcTemplate模板 -->
    <bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!-- 使用spring的声明式事务，Spring的事务管理也是基于AOP来实现的
    声明式事务的配置步骤：
    1. 配置相应的事务管理器(不同的持久化解决方案对应不同的事务管理器)
    2. 配置事务通知以及事务传播级别
    3. 配置事务切面以及切入点和通知引用-->

    <!-- 配置事务管理器,spring针对不同的持久化解决方法提供不同的事务管理器 -->
    <!-- 当前使用的是JDBC作为持久化，那么就使用DataSourceTransactionManager-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 必须注入一个datasource -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务通知,transaction-manager引用上面定义的事务管理器id -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- 配置事务属性，也就是传播级别 -->
        <tx:attributes>
            <!-- tx:method就是指定连接点,
            意思就是告诉Spring在调用目标对象什么方法之前开启事务,
             name指定连接点的方法名,可以使用*号进行通配

             propagation属性指定事务的传播级别:
             PROPAGATION_REQUIRED  如果当前没有事务，就新建一个事务，如果已经存在一个事务，加入到这个事务中。这是最常见的选择。
             PROPAGATION_SUPPORTS  如果当前有事务，则加入到这个事务中。如果当前没有事务，就以非事务方式执行。
             PROPAGATION_MANDATORY  加入当前的事务，如果当前没有事务，就抛出异常。
             PROPAGATION_REQUIRES_NEW  新建事务，如果当前存在事务，则把当前事务挂起。执行完新建的事务后再恢复之前的事务执行。
             PROPAGATION_NOT_SUPPORTED  以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
             PROPAGATION_NEVER  以非事务方式执行，如果当前存在事务，则抛出异常。
             PROPAGATION_NESTED  如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。
             (注意：事务传播只能在不同的类之间方法的相互调用才会执行传播，
             如果只是在当前类中方法相互调用是不会执行事务传播的)

             rollback-for表示遇到什么类型的异常就进行事务回滚

             read-only 表示当前事务是否是只读，true表示只读事务
             当设置为true之后，那么当前的事务操作只能进行查询，如果
             其他事务操作进行修改的话则引发异常,依据业务需要进行设置-->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置事务切面以及定义连接点 -->
    <aop:config>
        <!-- 配置切入点，意思就是将事务切入到什么地方 -->
        <aop:pointcut id="pointcut" expression="execution(* org.ch07.service.*.*(..))"/>
        <!-- 使用aop:advisor定义切面,引用上面定义的事务通知和切入点 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>

    <!-- 装配dao -->
    <bean id="stuDao" class="org.ch07.dao.StuDaoImpl">
        <!-- 注入jdbcTemplate -->
        <property name="jdbcTemplate" ref="template"/>
    </bean>

    <!-- 装配service -->
    <bean id="stuService" class="org.ch07.service.StuServiceImpl">
        <!-- 注入dao -->
        <property name="dao" ref="stuDao"/>
    </bean>

    <!-- 装配action -->
    <bean id="userAction" class="org.ch07.action.StuAction">
        <!-- 注入service -->
        <property name="service" ref="stuService"/>
    </bean>
</beans>